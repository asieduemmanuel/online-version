//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace online_version.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OnlineVersionEntities : DbContext
    {
        public OnlineVersionEntities()
            : base("name=OnlineVersionEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Delivering> Deliverings { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<DeliveedList_Result> DeliveedList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliveedList_Result>("DeliveedList");
        }
    
        public virtual ObjectResult<DeliveryList_Result> DeliveryList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliveryList_Result>("DeliveryList");
        }
    
        public virtual ObjectResult<Delivering> Ongoing()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Delivering>("Ongoing");
        }
    
        public virtual ObjectResult<Delivering> Ongoing(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Delivering>("Ongoing", mergeOption);
        }
    
        public virtual ObjectResult<GetAll_Result> GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAll_Result>("GetAll");
        }
    
        public virtual int myUpdate(Nullable<int> product_id, string comodity, Nullable<int> quantity, string supplierName, string deliveryDate, string deleveringBy, string status)
        {
            var product_idParameter = product_id.HasValue ?
                new ObjectParameter("Product_id", product_id) :
                new ObjectParameter("Product_id", typeof(int));
    
            var comodityParameter = comodity != null ?
                new ObjectParameter("Comodity", comodity) :
                new ObjectParameter("Comodity", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var deliveryDateParameter = deliveryDate != null ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(string));
    
            var deleveringByParameter = deleveringBy != null ?
                new ObjectParameter("DeleveringBy", deleveringBy) :
                new ObjectParameter("DeleveringBy", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("myUpdate", product_idParameter, comodityParameter, quantityParameter, supplierNameParameter, deliveryDateParameter, deleveringByParameter, statusParameter);
        }
    
        public virtual ObjectResult<Delivering> Update(Nullable<int> product_id, string comodity, Nullable<int> quantity, string supplierName, string deliveryDate, string deleveringBy, string status)
        {
            var product_idParameter = product_id.HasValue ?
                new ObjectParameter("Product_id", product_id) :
                new ObjectParameter("Product_id", typeof(int));
    
            var comodityParameter = comodity != null ?
                new ObjectParameter("Comodity", comodity) :
                new ObjectParameter("Comodity", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var deliveryDateParameter = deliveryDate != null ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(string));
    
            var deleveringByParameter = deleveringBy != null ?
                new ObjectParameter("DeleveringBy", deleveringBy) :
                new ObjectParameter("DeleveringBy", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Delivering>("Update", product_idParameter, comodityParameter, quantityParameter, supplierNameParameter, deliveryDateParameter, deleveringByParameter, statusParameter);
        }
    
        public virtual ObjectResult<Delivering> Update(Nullable<int> product_id, string comodity, Nullable<int> quantity, string supplierName, string deliveryDate, string deleveringBy, string status, MergeOption mergeOption)
        {
            var product_idParameter = product_id.HasValue ?
                new ObjectParameter("Product_id", product_id) :
                new ObjectParameter("Product_id", typeof(int));
    
            var comodityParameter = comodity != null ?
                new ObjectParameter("Comodity", comodity) :
                new ObjectParameter("Comodity", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var deliveryDateParameter = deliveryDate != null ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(string));
    
            var deleveringByParameter = deleveringBy != null ?
                new ObjectParameter("DeleveringBy", deleveringBy) :
                new ObjectParameter("DeleveringBy", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Delivering>("Update", mergeOption, product_idParameter, comodityParameter, quantityParameter, supplierNameParameter, deliveryDateParameter, deleveringByParameter, statusParameter);
        }
    
        public virtual ObjectResult<Delivering> sap(Nullable<int> product_id, string comodity, Nullable<int> quantity, string supplierName, string deliveryDate, string deleveringBy, string status)
        {
            var product_idParameter = product_id.HasValue ?
                new ObjectParameter("Product_id", product_id) :
                new ObjectParameter("Product_id", typeof(int));
    
            var comodityParameter = comodity != null ?
                new ObjectParameter("Comodity", comodity) :
                new ObjectParameter("Comodity", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var deliveryDateParameter = deliveryDate != null ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(string));
    
            var deleveringByParameter = deleveringBy != null ?
                new ObjectParameter("DeleveringBy", deleveringBy) :
                new ObjectParameter("DeleveringBy", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Delivering>("sap", product_idParameter, comodityParameter, quantityParameter, supplierNameParameter, deliveryDateParameter, deleveringByParameter, statusParameter);
        }
    
        public virtual ObjectResult<Delivering> sap(Nullable<int> product_id, string comodity, Nullable<int> quantity, string supplierName, string deliveryDate, string deleveringBy, string status, MergeOption mergeOption)
        {
            var product_idParameter = product_id.HasValue ?
                new ObjectParameter("Product_id", product_id) :
                new ObjectParameter("Product_id", typeof(int));
    
            var comodityParameter = comodity != null ?
                new ObjectParameter("Comodity", comodity) :
                new ObjectParameter("Comodity", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var deliveryDateParameter = deliveryDate != null ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(string));
    
            var deleveringByParameter = deleveringBy != null ?
                new ObjectParameter("DeleveringBy", deleveringBy) :
                new ObjectParameter("DeleveringBy", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Delivering>("sap", mergeOption, product_idParameter, comodityParameter, quantityParameter, supplierNameParameter, deliveryDateParameter, deleveringByParameter, statusParameter);
        }
    
        public virtual ObjectResult<UndeliveredList_Result> UndeliveredList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UndeliveredList_Result>("UndeliveredList");
        }
    }
}
